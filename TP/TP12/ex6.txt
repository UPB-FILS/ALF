(module
  (import "io" "print" (func $print (param $s i32)))
  (func $start (local $i i32)
    	i32.const 10
        set_local $i
        block $endfor
          loop $for
            get_local $i
            i32.const 20
            i32.gt_u
            br_if $endfor
            get_local $i
    		get_local $i
    		i32.mul
            call $print 
            get_local $i
            i32.const 1
            i32.add
            set_local $i
            br $for
          end $for
        end $endfor
    )
    (export "start" (func $start))

)


fetch('../out/main.wasm').then(response =>
  response.arrayBuffer()
).then(bytes => WebAssembly.instantiate(bytes, {
  io: {
    print: console.log
  }
})).then(results => {
  let instance = results.instance;
  // instance is your webassembly module
  let asm = instance.exports;
  // asm is an object with all the items that you exported
  console.log (asm.start());
}).catch(console.error);
