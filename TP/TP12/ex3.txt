(module
  (import "io" "print" (func $print (param $s i32)))
  (func $start (local $a i32) (local $b i32) (local $c i32)
    	i32.const 5
    	set_local $a
    	get_local $a
    	i32.const 6
    	set_local $b
    	get_local $b
    	i32.const 3
    	set_local $c
    	get_local $c
    	i32.div_s
    	i32.add
    	call $print
    )
   (export "start" (func $start))
)


fetch('../out/main.wasm').then(response =>
  response.arrayBuffer()
).then(bytes => WebAssembly.instantiate(bytes, {
  io: {
    print: console.log
  }
})).then(results => {
  let instance = results.instance;
  // instance is your webassembly module
  let asm = instance.exports;
  // asm is an object with all the items that you exported
  console.log (asm.start());
}).catch(console.error);
